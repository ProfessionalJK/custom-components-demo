{"version":3,"sources":["Button.js","Input.js","App.js","index.js"],"names":["Button","buttonBackground","buttonHeight","type","state","size","label","color","border","status","labelText","style","marginTop","backgroundColor","borderColor","height","borderRadius","disabled","onClick","alert","Input","inputHeight","placeholder","maxLength","App","useState","buttonType","setButtonType","setDisabled","setSize","buttonLabel","setButtonLabel","inputPlaceholder","setInputPlaceholder","inputMaxLength","setInputMaxLenght","inputSize","setInputSize","inputLabel","setInputLabel","className","value","onChange","e","target","width","name","checked","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5201eb43.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./index.css\";\r\n\r\nfunction Button({type, state, size, label}){\r\n  let buttonBackground;\r\n  let buttonHeight;\r\n  let color = 'black';\r\n  let border = '';\r\n  let status = state === 'True' ? true : false;\r\n  let labelText = !label? \"Click\" : label;\r\n  if(type === 'Primary'){\r\n    buttonBackground = 'blue'; \r\n    color = \"white\";\r\n  } \r\n  else if(type === 'Secondary'){\r\n    buttonBackground = 'white';\r\n    border = 'blue';\r\n  }\r\n  else if(type === 'Favourable'){\r\n    buttonBackground = 'green';\r\n    color = \"white\";\r\n  }\r\n  else if(type === 'Destructive'){\r\n    buttonBackground = 'red';\r\n    color = \"white\";\r\n  }\r\n  else if(type === 'Cancel'){\r\n    buttonBackground = 'white';\r\n    border = 'black';\r\n  }\r\n\r\n  if(size === 'Small'){\r\n    buttonHeight = '24px';\r\n  \r\n  }\r\n  else if(size === 'Medium'){\r\n    buttonHeight = '32px';\r\n  }\r\n  else if(size === 'Large'){\r\n    buttonHeight = '40px';\r\n  }\r\n  const click = () => {\r\n    alert(\"Button Type: \"+ type + \"\\nButton Size: \" + size + \"\\nButton Disabled: \"+ state);\r\n  }\r\n  return(\r\n    <div>\r\n      <button type={type} style={{marginTop: '8px', backgroundColor: buttonBackground, borderColor: border, height: buttonHeight, borderRadius: '8px', color: color}} disabled={status} onClick={click}>{labelText}</button>\r\n    </div>\r\n  );\r\n}\r\nexport default Button;","import React from 'react';\r\n\r\nexport default function Input({placeholder, maxLength, size, label}){\r\n    let inputHeight;\r\n    if(size === 'Small'){\r\n        inputHeight = '24px';\r\n      }\r\n      else if(size === 'Medium'){\r\n        inputHeight = '32px';\r\n      }\r\n      else if(size === 'Large'){\r\n        inputHeight = '40px';\r\n      }\r\n      if(maxLength === ''){\r\n          maxLength = 10;\r\n      }\r\n    return(\r\n        <div>\r\n            {label}<br />\r\n            <input type=\"text\" placeholder={placeholder} maxLength={maxLength} style={{marginTop: '8px', height: inputHeight}}/>\r\n        </div>\r\n    );\r\n}","import React, {useState} from \"react\";\nimport Button from './Button.js';\n/*import Text from './Text.js';\nimport Radio from './Radio.js';\nimport Num from './Num.js';\nimport Range from './Range.js';\nimport Submit from './Submit.js';\nimport Reset from './Reset.js';*/\nimport Input from './Input.js';\nimport \"./index.css\";\n\nfunction App(){\n  const [buttonType, setButtonType] = useState(\"primary\");\n  const [disabled, setDisabled] = useState(\"false\");\n  const [size, setSize] = useState(\"small\"); \n  const [buttonLabel, setButtonLabel] = useState(\"Click\"); \n  /*const [inputType, setInputType] = useState(\"\");\n  const [inputPlaceholder, setInputPlaceholder] = useState(\"\");\n  const [numberMinValue, setNumberMinValue] = useState(\"\");\n  const [numberMaxValue, setNumberMaxValue] = useState(\"\");\n  const [inputRadio, setInputRadio] = useState(\"\");*/\n  const [inputPlaceholder, setInputPlaceholder] = useState(\"\");\n  const [inputMaxLength, setInputMaxLenght] = useState(10);\n  const [inputSize, setInputSize] = useState(\"Small\"); \n  const [inputLabel, setInputLabel] = useState(\"\");\n  return(\n    <div className=\"main\">\n      <h2>Button Component Demo</h2>\n      <form>\n      <label>Button Type</label> <br />\n      <select value={buttonType} onChange={e => setButtonType(e.target.value)} style={{width: '100px'}}>\n        <option value=\"\">Select</option>\n        <option value=\"Primary\">Primary</option>\n        <option value=\"Secondary\">Secondary</option>\n        <option value=\"Favourable\">Favourable</option>\n        <option value=\"Destructive\">Destructive</option>\n        <option value=\"Cancel\">Cancel</option>\n      </select><br /><br />\n      <label>Button Size</label><br />\n      <select value={size} onChange={e => setSize(e.target.value)} style={{width: '100px'}}>\n        <option value=\"\">Select</option>\n        <option value=\"Small\">Small</option>\n        <option value=\"Medium\">Medium</option>\n        <option value=\"Large\">Large</option>\n      </select><br /><br />\n      <label>Disabled</label><br />\n      <input type=\"radio\" name='disabled' value=\"True\" onChange={e => setDisabled(e.target.value)}/>True\n      <input type=\"radio\" name='disabled' value=\"False\" onChange={e => setDisabled(e.target.value)} checked/>False\n      <br /><br />\n      <label>Button Label</label><br />\n      <input type=\"text\" onChange={e => setButtonLabel(e.target.value)} />\n      </form>\n      <Button type={buttonType} state={disabled} size={size} label={buttonLabel}/>\n\n      <h2>Input Field Component</h2>\n      <label>Palceholder</label><br />\n      <input type=\"text\" value={inputPlaceholder} onChange={e => setInputPlaceholder(e.target.value)}/><br /><br />\n      <label>Max Length</label><br />\n      <input type=\"number\" value={inputMaxLength} onChange={e => setInputMaxLenght(e.target.value)} /><br /><br />\n      <label>Input Size</label><br />\n      <select value={inputSize} onChange={e => setInputSize(e.target.value)} style={{width: '178px'}}>\n        <option value=\"Small\">Small</option>\n        <option value=\"Medium\">Medium</option>\n        <option value=\"Large\">Large</option>\n      </select><br /><br />\n      <label>Label</label><br />\n      <input type=\"text\" value={inputLabel} onChange={e => setInputLabel(e.target.value)}/><br /><br />\n      <Input placeholder={inputPlaceholder} maxLength={inputMaxLength} size={inputSize} label={inputLabel}/>\n    </div>\n  );\n}\n\nexport default App;\n\n/*\n\n      <h2>Input Field Component Demo</h2>\n      <form>\n        <label>Input Field Type</label><br />\n              <select value={inputType} onChange={e => setInputType(e.target.value)} style={{width: '177px'}}>\n                <option value=\"\">Select</option>\n                <option value=\"number\">Number</option>\n                <option value=\"password\">Password</option>\n                <option value=\"radio\">Radio</option>\n                <option value=\"range\">Range</option>\n                <option value=\"reset\">Reset</option>\n                <option value=\"submit\">Submit</option>\n                <option value=\"text\">Text</option>\n              </select>\n           \n          {inputType === 'number' || inputType === 'range' ? \n          (\n            <div><br />\n            <label>Min Value</label><br />\n              <input value={numberMinValue} type='text' onChange={e => \n              {if(!e.target.value.match(\"^[0-9]*$\")){\n                e.target.style.color = 'red'\n              }\n              else{\n                e.target.style.color = 'black';\n                setNumberMinValue(e.target.value);\n              }}}/><br /><br />\n              <label>Max Value</label><br />\n              <input value={numberMaxValue} type='text' onChange={e => \n              {if(!e.target.value.match(\"^[0-9]*$\")){\n                e.target.style.color = 'red'\n              }\n              else{\n                e.target.style.color = 'black';\n                setNumberMaxValue(e.target.value);\n              }}}/>\n              </div>\n          )\n          : \"\"}\n          \n          {inputType === 'password' || inputType === 'text'? \n          (\n            <div><br /><label>Placeholder Value</label><br />\n            <input type=\"text\" value={inputPlaceholder} onChange={e => setInputPlaceholder(e.target.value)}/>\n            </div>\n          )\n          : \"\"}\n\n          {inputType === 'radio'? \n          (\n            <div><br /><label>Value</label><br />\n              <input type=\"text\" value={inputRadio} onChange={e => setInputRadio(e.target.value)}/>\n            </div>\n          )\n          : \"\"}\n\n          </form>\n      {inputType === 'text' || inputType === 'password' ? (<Text type={inputType} placeholder={inputPlaceholder}/>) : \"\"}\n      {inputType === 'radio' && inputRadio !== ''? (<Radio type={inputType} value={inputRadio}/>): \"\"}\n      {inputType === 'number' && numberMinValue && numberMaxValue? <Num type={inputType} minimum={numberMinValue} maximum={numberMaxValue}/> : \"\"}\n      {inputType === 'range' && numberMinValue && numberMaxValue? <Range type={inputType} minimum={numberMinValue} maximum={numberMaxValue}/> : \"\"}\n      {inputType === 'submit' ? <Submit type={inputType} /> : \"\"}         \n      {inputType === 'reset' ? <Reset type={inputType} /> : \"\"}     \n\n */","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}